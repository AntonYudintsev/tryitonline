#!/usr/bin/env bash

error()
{
	echo "$separator$1"
	exit 1
}

cat_string()
{
	read_integer size
	head -c $size
}

read_integer()
{
	read_string "$1"
	((10#${!1} >= 0)) || error "'${!1}' is not an unsigned decimal integer literal."
}

read_string()
{
	IFS= read -d '' -r "$@"
}

export LANG=en_US.UTF8 PATH="/usr/local/bin:$PATH" TZ=UTC
TIMEFORMAT=$'\nReal time: %3R s\nUser time: %3U s\nSys. time: %3S s\nCPU share: %P %'
separator=$(head -c 12 /dev/urandom | base64 | tee .error.tio)
wrappers=/srv/wrappers
timeout=$1
identifiers='args|lang'

while ((time_left = timeout - SECONDS)) && read_string -N1 action; do case "$action" in
	D)	# delete file/directory
		read_string name
		rm -r "$name" || error "The file/directory '$name' could not be deleted."
		;;
	F)	# create file
		read_string name
		mkdir -p "$(dirname "$name")" && cat_string > "$name" || error "The file '$name' could not be created."
		;;
	R)	# run the code
		[[ $lang =~ ^[0-9A-Za-z_-]+$ ]] && [[ -f $wrappers/$lang ]] || error "The language '$lang' could not be found on the server."
		echo -en $separator >> .output.tio
		echo -en $separator >> .debug.tio
		touch .code.tio .input.tio
		{ time timeout $time_left "$wrappers/$lang" "${args[@]}"; } 2> >(head -c 128K >> .debug.tio) | head -c 128K >> .output.tio
		status=${PIPESTATUS[0]}
		printf 'Exit code: %u' $status >> .debug.tio
		;;
	U)	# unset variable
		read_string name
		unset "$name"
		;;
	V)	# declare variable
		read_string name
		unset "$name"
		[[ $name =~ ^(identifiers)$ ]] && error "The variable '$name' could not be declared."
		read_integer length
		for ((index = 0; index < length; index++)); do read_string "$name[$index]"; done
		;;
	*)
		error "The instruction '$action' is not implemented."
esac; done

touch .{output,debug,error}.tio
head -c 128K .output.tio
head -c 128K .debug.tio
head -c 1024 .error.tio
(( $(stat -c %s .output.tio) > 128 << 10 )) && echo "The output exceeded 128 KiB and was truncated."
(( $(stat -c %s .debug.tio) > 128 << 10 )) && echo "The debugging information exceeded 128 KiB and was truncated."
(( time_left == 0 && status == 124 )) && echo "The request exceeded the $timeout second time limit and was terminated."
