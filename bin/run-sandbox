#!/usr/bin/env bash

error()
{
	echo "$1" >> .error.tio
	exit 1
}

read_int()
{
	(($1 = 16#$(head -c 4 | xxd -ps)))
}

read_by_size()
{
	read_int file_size
	head -c $file_size
}

read_til_nul()
{
	IFS= read -d '' -r "$1"
}

export LANG=en_US.UTF8 TZ=UTC
separator=$(head -c 12 /dev/urandom | base64 | tee .error.tio)
wrappers=/srv/wrappers
read_int flags_low
read_int flags_high
read_int fiddles
read_til_nul lang

[[ $lang =~ ^[0-9A-Za-z_-]+$ ]] && [[ -f $wrappers/$lang ]] || error "The requested language could not be found on the server."
read_by_size > .code.tio
[[ -s .code.tio ]] && echo >> .code.tio
read_by_size >> .code.tio
read_by_size > .footer.tio
[[ -s .footer.tio ]] && { echo; cat .footer.tio; } >> .code.tio
rm .footer.tio

for ((fiddle = 0; (time_left = 60 - SECONDS) > 0 && fiddle < fiddles; fiddle++)); {
	echo -en $separator >> .output.tio
	echo -en $separator >> .debug.tio
	read_by_size > .input.tio
	read_int numargs
	args=()
	for ((arg = 0; arg < numargs; arg++)); {
		read_til_nul temp
		args+=("$temp")
	}
	/usr/bin/time -v timeout $time_left "$wrappers/$lang" "${args[@]}" 2> >(head -c 128K >> .debug.tio) | head -c 128K >> .output.tio
	status=${PIPESTATUS[0]}
}

touch .{output,debug,error}.tio
head -c 128K .output.tio
head -c 128K .debug.tio
head -c 1024 .error.tio
(( $(stat -c %s .output.tio) > 128 << 10 )) && echo "The output exceeded 128 KiB and was truncated."
(( $(stat -c %s .debug.tio) > 128 << 10 )) && echo "The debugging information exceeded 128 KiB and was truncated."
(( time_left > 0 || status != 124 )) || echo "The request exceeded the 60 second time limit and was terminated."
