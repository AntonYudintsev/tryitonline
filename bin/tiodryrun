#!/usr/bin/env python3

try:
	from argparse import ArgumentParser
	from json import load
	from subprocess import Popen, PIPE
	from time import time
	from zlib import decompress, compress

	langs = []
	expected = []
	request = b''

	parser = ArgumentParser()
	parser.add_argument('-a', '--arena', default = 'localhost', dest = 'arena', metavar = 'hostname', type = str, help = 'targeted arena server (default: localhost)')
	parser.add_argument('-l', '--language', dest = 'languages', metavar = 'id', nargs='+', help = 'language(s) to be tested (default: all languages)')
	parser.add_argument('-s', '--script', default = '/srv/tio.run/cgi-bin/run', dest = 'script', metavar = 'path', help = 'targeted script (default: /srv/tio.run/cgi-bin/run)')
	parser.add_argument('-v', '--verbose', action = 'store_true', dest = 'verbose', help = 'also print results of successful tests')
	args = parser.parse_args()

	for category in load(open('/srv/tryitonline.net/languages.json')).values():
		for language_id, language in sorted(category['byId'].items()):
			if args.languages and language_id not in args.languages:
				continue
			langs.append(language_id)
			test_object = language['tests']['helloWorld']
			test_object['request'].insert(0, {'command': 'V', 'payload': {'lang': [language_id]}})
			test_object['request'].append({'command': 'RC'})
			for instruction in test_object['request']:
				request += instruction['command'].encode()
				if 'payload' in instruction:
					[(name, value)] = instruction['payload'].items()
					request += b'%s\0' % name.encode()
					if type(value) == str:
						value = value.encode()
					request += b'%u\0' % len(value)
					if type(value) != bytes:
						value = '\0'.join(value).encode() + b'\0'
					request += value
			expected.append(test_object['response'])
	tests = len(langs)
	print('\033[1;37;40mTesting %u language%s...' % (tests, tests > 1 and 's' or ''))
	env = {'PATH_INFO': '/api/no-cache/', 'REQUEST_METHOD': 'POST', 'TIMEOUT_HARD': str(60 * tests + 5), 'TIMEOUT_SOFT': str(60 * tests), 'do_not_cache': '1'}
	env['SSH_USER_HOST'] = 'runner@' + args.arena
	request_raw = compress(request, 9)[2:-4]
	start = time()
	response_raw = Popen(args.script, env = env, stdin = PIPE, stdout = PIPE).communicate(input = request_raw)
	print('\033[37mArena responded after %.3f seconds.' % (time() - start))
	response = decompress(response_raw[0].split(b'\n\n', 1)[1], 31)
	delimiter = response[:16]
	returned = response[16:].split(delimiter)
	count = len(returned) >> 1
	returned, warnings = returned[:count], returned[count:]
	failures = 0

	for lang, expected, returned, warning in zip(langs, expected, returned, warnings):
		returned = returned.strip().decode(errors = 'replace')
		warning = warning.strip().decode(errors = 'replace')
		if expected != returned:
			print('\033[31m%s\n\033[36m%s\n\033[31m%s\n\033[30m%s' % (lang, expected, returned, warning))
			failures += 1
		elif args.verbose:
			print('\033[32m%s\n\033[30m%s' % (lang, warning))

	if warnings[-1].strip():
		print('\033[31m%s\n' % warnings[-1].decode(errors = 'replace'))

	print('\033[37mResult: %u succeeded, %u failed, %u not tested\033[m' % (count - failures, failures, tests - count))

	if failures > 0:
		raise SystemExit(2)
except KeyboardInterrupt:
	print('\033[m')
	raise SystemExit(130)
